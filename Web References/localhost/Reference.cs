//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Web.localhost {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DayendsSoap", Namespace="http://tempuri.org/")]
    public partial class Dayends : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback WriteAbssSalesToDbOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReadMYOBOperationCompleted;
        
        private System.Threading.SendOrPostCallback WriteMYOBBulkOperationCompleted;
        
        private System.Threading.SendOrPostCallback WriteMYOBOperationCompleted;
        
        private System.Threading.SendOrPostCallback WriteTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestMyobConnectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback AsynTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParameterTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConsoleArgsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckConnectedOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveFileOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Dayends() {
            this.Url = global::Web.Properties.Settings.Default.Web_localhost_Dayends;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event WriteAbssSalesToDbCompletedEventHandler WriteAbssSalesToDbCompleted;
        
        /// <remarks/>
        public event ReadMYOBCompletedEventHandler ReadMYOBCompleted;
        
        /// <remarks/>
        public event WriteMYOBBulkCompletedEventHandler WriteMYOBBulkCompleted;
        
        /// <remarks/>
        public event WriteMYOBCompletedEventHandler WriteMYOBCompleted;
        
        /// <remarks/>
        public event WriteTestCompletedEventHandler WriteTestCompleted;
        
        /// <remarks/>
        public event TestMyobConnectionCompletedEventHandler TestMyobConnectionCompleted;
        
        /// <remarks/>
        public event AsynTestCompletedEventHandler AsynTestCompleted;
        
        /// <remarks/>
        public event ParameterTestCompletedEventHandler ParameterTestCompleted;
        
        /// <remarks/>
        public event ConsoleArgsCompletedEventHandler ConsoleArgsCompleted;
        
        /// <remarks/>
        public event CheckConnectedCompletedEventHandler CheckConnectedCompleted;
        
        /// <remarks/>
        public event MoveFileCompletedEventHandler MoveFileCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WriteAbssSalesToDb", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string WriteAbssSalesToDb() {
            object[] results = this.Invoke("WriteAbssSalesToDb", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void WriteAbssSalesToDbAsync() {
            this.WriteAbssSalesToDbAsync(null);
        }
        
        /// <remarks/>
        public void WriteAbssSalesToDbAsync(object userState) {
            if ((this.WriteAbssSalesToDbOperationCompleted == null)) {
                this.WriteAbssSalesToDbOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWriteAbssSalesToDbOperationCompleted);
            }
            this.InvokeAsync("WriteAbssSalesToDb", new object[0], this.WriteAbssSalesToDbOperationCompleted, userState);
        }
        
        private void OnWriteAbssSalesToDbOperationCompleted(object arg) {
            if ((this.WriteAbssSalesToDbCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WriteAbssSalesToDbCompleted(this, new WriteAbssSalesToDbCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReadMYOB", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReadMYOB(string dsn, string sql) {
            object[] results = this.Invoke("ReadMYOB", new object[] {
                        dsn,
                        sql});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReadMYOBAsync(string dsn, string sql) {
            this.ReadMYOBAsync(dsn, sql, null);
        }
        
        /// <remarks/>
        public void ReadMYOBAsync(string dsn, string sql, object userState) {
            if ((this.ReadMYOBOperationCompleted == null)) {
                this.ReadMYOBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReadMYOBOperationCompleted);
            }
            this.InvokeAsync("ReadMYOB", new object[] {
                        dsn,
                        sql}, this.ReadMYOBOperationCompleted, userState);
        }
        
        private void OnReadMYOBOperationCompleted(object arg) {
            if ((this.ReadMYOBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReadMYOBCompleted(this, new ReadMYOBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WriteMYOBBulk", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void WriteMYOBBulk(string connectionString, string[] sqllist) {
            this.Invoke("WriteMYOBBulk", new object[] {
                        connectionString,
                        sqllist});
        }
        
        /// <remarks/>
        public void WriteMYOBBulkAsync(string connectionString, string[] sqllist) {
            this.WriteMYOBBulkAsync(connectionString, sqllist, null);
        }
        
        /// <remarks/>
        public void WriteMYOBBulkAsync(string connectionString, string[] sqllist, object userState) {
            if ((this.WriteMYOBBulkOperationCompleted == null)) {
                this.WriteMYOBBulkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWriteMYOBBulkOperationCompleted);
            }
            this.InvokeAsync("WriteMYOBBulk", new object[] {
                        connectionString,
                        sqllist}, this.WriteMYOBBulkOperationCompleted, userState);
        }
        
        private void OnWriteMYOBBulkOperationCompleted(object arg) {
            if ((this.WriteMYOBBulkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WriteMYOBBulkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WriteMYOB", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool WriteMYOB(string connectionString, string sql) {
            object[] results = this.Invoke("WriteMYOB", new object[] {
                        connectionString,
                        sql});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void WriteMYOBAsync(string connectionString, string sql) {
            this.WriteMYOBAsync(connectionString, sql, null);
        }
        
        /// <remarks/>
        public void WriteMYOBAsync(string connectionString, string sql, object userState) {
            if ((this.WriteMYOBOperationCompleted == null)) {
                this.WriteMYOBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWriteMYOBOperationCompleted);
            }
            this.InvokeAsync("WriteMYOB", new object[] {
                        connectionString,
                        sql}, this.WriteMYOBOperationCompleted, userState);
        }
        
        private void OnWriteMYOBOperationCompleted(object arg) {
            if ((this.WriteMYOBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WriteMYOBCompleted(this, new WriteMYOBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WriteTest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string WriteTest(string itemcode, string salescode, string salesdate, string location, string job, string shopkeeper) {
            object[] results = this.Invoke("WriteTest", new object[] {
                        itemcode,
                        salescode,
                        salesdate,
                        location,
                        job,
                        shopkeeper});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void WriteTestAsync(string itemcode, string salescode, string salesdate, string location, string job, string shopkeeper) {
            this.WriteTestAsync(itemcode, salescode, salesdate, location, job, shopkeeper, null);
        }
        
        /// <remarks/>
        public void WriteTestAsync(string itemcode, string salescode, string salesdate, string location, string job, string shopkeeper, object userState) {
            if ((this.WriteTestOperationCompleted == null)) {
                this.WriteTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWriteTestOperationCompleted);
            }
            this.InvokeAsync("WriteTest", new object[] {
                        itemcode,
                        salescode,
                        salesdate,
                        location,
                        job,
                        shopkeeper}, this.WriteTestOperationCompleted, userState);
        }
        
        private void OnWriteTestOperationCompleted(object arg) {
            if ((this.WriteTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WriteTestCompleted(this, new WriteTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TestMyobConnection", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TestMyobConnection(string dsn) {
            object[] results = this.Invoke("TestMyobConnection", new object[] {
                        dsn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TestMyobConnectionAsync(string dsn) {
            this.TestMyobConnectionAsync(dsn, null);
        }
        
        /// <remarks/>
        public void TestMyobConnectionAsync(string dsn, object userState) {
            if ((this.TestMyobConnectionOperationCompleted == null)) {
                this.TestMyobConnectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestMyobConnectionOperationCompleted);
            }
            this.InvokeAsync("TestMyobConnection", new object[] {
                        dsn}, this.TestMyobConnectionOperationCompleted, userState);
        }
        
        private void OnTestMyobConnectionOperationCompleted(object arg) {
            if ((this.TestMyobConnectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestMyobConnectionCompleted(this, new TestMyobConnectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AsynTest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Task AsynTest(string test) {
            object[] results = this.Invoke("AsynTest", new object[] {
                        test});
            return ((Task)(results[0]));
        }
        
        /// <remarks/>
        public void AsynTestAsync(string test) {
            this.AsynTestAsync(test, null);
        }
        
        /// <remarks/>
        public void AsynTestAsync(string test, object userState) {
            if ((this.AsynTestOperationCompleted == null)) {
                this.AsynTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAsynTestOperationCompleted);
            }
            this.InvokeAsync("AsynTest", new object[] {
                        test}, this.AsynTestOperationCompleted, userState);
        }
        
        private void OnAsynTestOperationCompleted(object arg) {
            if ((this.AsynTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AsynTestCompleted(this, new AsynTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ParameterTest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ParameterTest(string salescode) {
            object[] results = this.Invoke("ParameterTest", new object[] {
                        salescode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ParameterTestAsync(string salescode) {
            this.ParameterTestAsync(salescode, null);
        }
        
        /// <remarks/>
        public void ParameterTestAsync(string salescode, object userState) {
            if ((this.ParameterTestOperationCompleted == null)) {
                this.ParameterTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParameterTestOperationCompleted);
            }
            this.InvokeAsync("ParameterTest", new object[] {
                        salescode}, this.ParameterTestOperationCompleted, userState);
        }
        
        private void OnParameterTestOperationCompleted(object arg) {
            if ((this.ParameterTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParameterTestCompleted(this, new ParameterTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConsoleArgs", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ConsoleArgs() {
            this.Invoke("ConsoleArgs", new object[0]);
        }
        
        /// <remarks/>
        public void ConsoleArgsAsync() {
            this.ConsoleArgsAsync(null);
        }
        
        /// <remarks/>
        public void ConsoleArgsAsync(object userState) {
            if ((this.ConsoleArgsOperationCompleted == null)) {
                this.ConsoleArgsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConsoleArgsOperationCompleted);
            }
            this.InvokeAsync("ConsoleArgs", new object[0], this.ConsoleArgsOperationCompleted, userState);
        }
        
        private void OnConsoleArgsOperationCompleted(object arg) {
            if ((this.ConsoleArgsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConsoleArgsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckConnected", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckConnected() {
            object[] results = this.Invoke("CheckConnected", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckConnectedAsync() {
            this.CheckConnectedAsync(null);
        }
        
        /// <remarks/>
        public void CheckConnectedAsync(object userState) {
            if ((this.CheckConnectedOperationCompleted == null)) {
                this.CheckConnectedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckConnectedOperationCompleted);
            }
            this.InvokeAsync("CheckConnected", new object[0], this.CheckConnectedOperationCompleted, userState);
        }
        
        private void OnCheckConnectedOperationCompleted(object arg) {
            if ((this.CheckConnectedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckConnectedCompleted(this, new CheckConnectedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MoveFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MoveFile() {
            this.Invoke("MoveFile", new object[0]);
        }
        
        /// <remarks/>
        public void MoveFileAsync() {
            this.MoveFileAsync(null);
        }
        
        /// <remarks/>
        public void MoveFileAsync(object userState) {
            if ((this.MoveFileOperationCompleted == null)) {
                this.MoveFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveFileOperationCompleted);
            }
            this.InvokeAsync("MoveFile", new object[0], this.MoveFileOperationCompleted, userState);
        }
        
        private void OnMoveFileOperationCompleted(object arg) {
            if ((this.MoveFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Task {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void WriteAbssSalesToDbCompletedEventHandler(object sender, WriteAbssSalesToDbCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WriteAbssSalesToDbCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WriteAbssSalesToDbCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ReadMYOBCompletedEventHandler(object sender, ReadMYOBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReadMYOBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReadMYOBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void WriteMYOBBulkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void WriteMYOBCompletedEventHandler(object sender, WriteMYOBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WriteMYOBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WriteMYOBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void WriteTestCompletedEventHandler(object sender, WriteTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WriteTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WriteTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void TestMyobConnectionCompletedEventHandler(object sender, TestMyobConnectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestMyobConnectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestMyobConnectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void AsynTestCompletedEventHandler(object sender, AsynTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AsynTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AsynTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Task Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Task)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ParameterTestCompletedEventHandler(object sender, ParameterTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParameterTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParameterTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ConsoleArgsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void CheckConnectedCompletedEventHandler(object sender, CheckConnectedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckConnectedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckConnectedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void MoveFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591